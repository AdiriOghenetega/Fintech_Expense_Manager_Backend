generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")

  // Relations
  expenses       Expense[]
  budgets        Budget[]
  reports        Report[]
  passwordResets PasswordReset[]

  @@map("users")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([token])
  @@map("password_resets")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  color       String   @default("#3B82F6")
  icon        String   @default("folder")
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")

  expenses Expense[]
  budgets  Budget[]
  aiRules  AiCategoryRule[]

  @@map("categories")
}

enum PaymentMethod {
  CREDIT_CARD    @map("credit_card")
  DEBIT_CARD     @map("debit_card")
  CASH           @map("cash")
  BANK_TRANSFER  @map("bank_transfer")
  DIGITAL_WALLET @map("digital_wallet")

  @@map("payment_method")
}

model Expense {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  categoryId      String        @map("category_id")
  amount          Decimal       @db.Decimal(10, 2)
  description     String
  transactionDate DateTime      @map("transaction_date") @db.Date
  merchant        String?
  paymentMethod   PaymentMethod @map("payment_method")
  isRecurring     Boolean       @default(false) @map("is_recurring")
  aiConfidence    Decimal?      @db.Decimal(3, 2) @map("ai_confidence")
  tags            String[]      @default([])
  notes           String?
  receiptUrl      String?       @map("receipt_url")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@index([userId, transactionDate(sort: Desc)])
  @@index([userId, categoryId, transactionDate])
  @@index([categoryId])
  @@index([userId, transactionDate, amount], name: "idx_user_date_amount")
  @@index([transactionDate, userId], name: "idx_date_user")  
  @@index([userId, amount], name: "idx_user_amount")
  @@index([categoryId, transactionDate, amount], name: "idx_category_date_amount")
  @@index([userId, createdAt], name: "idx_user_created")
  @@index([transactionDate], name: "idx_transaction_date")
  
  @@map("expenses")
}

enum BudgetPeriod {
  MONTHLY   @map("monthly")
  QUARTERLY @map("quarterly")
  YEARLY    @map("yearly")

  @@map("budget_period")
}

model Budget {
  id         String       @id @default(uuid())
  userId     String       @map("user_id")
  categoryId String       @map("category_id")
  amount     Decimal      @db.Decimal(10, 2)
  period     BudgetPeriod
  startDate  DateTime     @map("start_date") @db.Date
  endDate    DateTime     @map("end_date") @db.Date
  isActive   Boolean      @default(true) @map("is_active")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId, period, startDate])
  @@index([userId, categoryId])
  @@index([userId, isActive, period], name: "idx_user_active_period")
  @@index([userId, startDate, endDate], name: "idx_user_date_range")  
  @@index([isActive, startDate, endDate], name: "idx_active_date_range")
  @@index([userId, isActive, startDate, endDate], name: "idx_user_active_dates")
  @@index([period, isActive], name: "idx_period_active")
  
  @@map("budgets")
}

enum ReportType {
  MONTHLY   @map("monthly")
  QUARTERLY @map("quarterly")
  YEARLY    @map("yearly")
  CUSTOM    @map("custom")

  @@map("report_type")
}

model Report {
  id             String     @id @default(uuid())
  userId         String     @map("user_id")
  name           String
  type           ReportType
  parameters     Json
  generatedAt    DateTime   @default(now()) @map("generated_at")
  filePath       String?    @map("file_path")
  isScheduled    Boolean    @default(false) @map("is_scheduled")
  scheduleConfig Json?      @map("schedule_config")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, generatedAt(sort: Desc)])
  @@map("reports")
}

model AiCategoryRule {
  id         String   @id @default(uuid())
  keywords   String[]
  patterns   String[]
  categoryId String   @map("category_id")
  confidence Decimal  @db.Decimal(3, 2)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  category Category @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@map("ai_category_rules")
}